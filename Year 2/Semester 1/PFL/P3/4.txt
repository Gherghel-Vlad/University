 sublist(l1l2..ln) = 
 	[], n = 0
 	l1 + sublist(l2..ln)
	sublist(l2..ln)

% sublist(L:list, R:list)
% flow: (i,i), (i, o)

sublist([], []).
sublist([E|T], [E|R]):-
  sublist(T, R).
sublist([_|T], R):-
  sublist(T, R).

ascending(l1l2...ln) = 	true, n = 0 || n=1
			ascending(l2l3...ln), l1<l2 
			false, otherwise

% ascending(L:list)
% flow: (i)
ascending([]):-!, false.
ascending([_]):-!.
ascending([H1, H2|T]):-
	H1 < H2,
	ascending([H2|T]).

process(l1l2..ln) = 
	[], n = 0
	sublist(l1..ln), ascending(sublist(l1..ln))

%process(L:list, R:list)
% flow: (i,i)

process([], []).
process(L, K):-
	sublist(L, K),
	ascending(K).

% allsolutions(L:list R:list)
% allsolutions(i, o)

allsolutions(L, R) :-
    findall(RPartial, process(L, RPartial), R).