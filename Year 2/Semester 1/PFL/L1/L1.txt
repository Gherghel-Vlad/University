14 a)Write a function to return the union of two sets.


eliminate_occurance(l1l2l3...ln, e) = [], n=0
					eliminate_occurance(l2l3...ln, e), e= l1
					l1+ eliminate_occurance(l2l3...ln, e)


unionProg(l1l2l3...ln, p1p2p3...pm) = nil, if n = 0  and m =0
					p1p2...pm, if n=0
					l1 U unionProg(l2l3...ln, eliminate_occurance(p1p2p3...pm, l1)) otherwise


(defun eliminate_occurance(l e)

(cond
    ((null l) nil)
    ((= (car l) e) (eliminate_occurance (cdr l) e))
    (T (cons (car l) (eliminate_occurance (cdr l) e)))
)

)

;(print (eliminate_occurance '(1 3 4 5 4 5) 4))


(DEFUN unionProg(l1 l2)
  (cond 
        ((and (null l1) (null l2)) nil)
        ((null l1) l2)
        (T (cons (car l1) (unionProg (cdr l1) (eliminate_occurance l2 (car l1)))))
  )
)

(print (unionProg '(1 2 4 3) '(5 4 6 2)))


b)Write a function to return the product of all numerical atoms in a list, at anylevel.


product(l1l2l3...ln) = nil, n = 0
			l1* product(l2l3..ln), l1 number
			procuct(l1) * procuct(l2l3..ln), l1 list
			product(l2l3...ln), otherwise			



(defun product(l1)

    (cond
        ((null l1) 1)
        ((numberp (car l1)) (* (car l1) (product (cdr l1))))
        ((listp (car l1)) (* (product (car l1)) (product (cdr l1))))
        (T (product (cdr l1)))
    
    )

)

(print (product '(1 2 (3 (6) 4) 5)))




c)Write a function to sort a linear list with keeping the double values.




insert(l1l2l3...ln, e) = e, n=0
			l1 + insert(l2l3...ln, e), e>l1
			e + l1l2...ln, otherwise

sort(l1l2l3....ln) = nil, n=0
			insert(sort(l2l3...ln), l1), otherwise


(defun insert(l1 e)
    (cond
        ((null l1) (list e))
        ((> e (car l1)) (cons (car l1) (insert (cdr l1) e)))
        (T (cons e l1))
    )

)

;(print (insert '(1 2 5) -1))


(defun sort1(l)
    (cond
        ((null l) nil)
        (T (insert (sort1 (cdr l)) (car l)))
    )
)

(print (sort1 '(1 4 2 2 3 6 5 1)))





d)Build a list which contains positions of a minimum numeric element from a given linear list.




get_minim_of_list(l1l2l3...ln)= nil, n=0
				l1, n=1
				l1, l1 < get_minimum_of_list(l2l3...ln)
				l1 < get_minimum_of_list(l2l3...ln), otherwise




get_positions_of_element_aux(l1l2...ln, e, pos) = nil, n= 0
							pos U get_positions_of_element_aux(l2...ln, c1c2...cm, e, pos+1) if l1=e
							get_positions_of_element_aux(l2...ln, c1c2...cm, e, pos+1), otherwise					

get_position_of_element(l1l2l3...ln) = get_positions_of_element_aux(l1l2...ln, get_minimum_of_list(l1l2...ln), 1)


(defun get_minimum_of_list(l)
    (cond
        ((null l) nil)
        ((null (cdr l)) (car l))
        ((< (car l) (get_minimum_of_list (cdr l))) (car l))
        (T (get_minimum_of_list (cdr l)))
    )
)

;(print (get_minimum_of_list '( 4 3 2 5 3 1)))


(defun get_position_of_element_aux(l e pos)
    (cond
        ((null l) nil)
        ((= (car l) e) ( cons pos (get_position_of_element_aux (cdr l)  e (+ 1 pos))))
        (T (get_position_of_element_aux (cdr l) e (+ 1 pos)))
    )
)

(defun get_position_of_element(l)

    (get_position_of_element_aux l  (get_minimum_of_list l) 1)
)


(print (get_position_of_element '(3 6 5 2 2 5 3 4 2 2)))
(print (get_position_of_element '(1)))






THE WHOLE PROGRAM!!!!!!!!!




(defun eliminate_occurance(l e)

(cond
    ((null l) nil)
    ((= (car l) e) (eliminate_occurance (cdr l) e))
    (T (cons (car l) (eliminate_occurance (cdr l) e)))
)

)

;(print (eliminate_occurance '(1 3 4 5 4 5) 4))


(DEFUN unionProg(l1 l2)
  (cond 
        ((and (null l1) (null l2)) nil)
        ((null l1) l2)
        (T (cons (car l1) (unionProg (cdr l1) (eliminate_occurance l2 (car l1)))))
  )
)

;(print (unionProg '(1 2 4 3) '(5 4 6 2)))


(defun product(l1)

    (cond
        ((null l1) 1)
        ((numberp (car l1)) (* (car l1) (product (cdr l1))))
        ((listp (car l1)) (* (product (car l1)) (product (cdr l1))))
        (T (product (cdr l1)))
    
    )

)

;(print (product '(1 2 (3 (6) 4) 5)))


(defun insert(l1 e)
    (cond
        ((null l1) (list e))
        ((> e (car l1)) (cons (car l1) (insert (cdr l1) e)))
        (T (cons e l1))
    )

)

;(print (insert '(1 2 5) -1))


(defun sort1(l)
    (cond
        ((null l) nil)
        (T (insert (sort1 (cdr l)) (car l)))
    )
)

;(print (sort1 '(1 4 2 2 3 6 5 1)))


(defun get_minimum_of_list(l)
    (cond
        ((null l) nil)
        ((null (cdr l)) (car l))
        ((< (car l) (get_minimum_of_list (cdr l))) (car l))
        (T (get_minimum_of_list (cdr l)))
    )
)

;(print (get_minimum_of_list '( 4 3 2 5 3 1)))


(defun get_position_of_element_aux(l e pos)
    (cond
        ((null l) nil)
        ((= (car l) e) ( cons pos (get_position_of_element_aux (cdr l)  e (+ 1 pos))))
        (T (get_position_of_element_aux (cdr l) e (+ 1 pos)))
    )
)

(defun get_position_of_element(l)

    (get_position_of_element_aux l  (get_minimum_of_list l) 1)
)


(print (get_position_of_element '(3 6 5 2 2 5 3 4 2 2)))
(print (get_position_of_element '(1)))











