     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, scanf            ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  
    15                                  
    16                                  
    17                                  segment data use32 class=data
    18 00000000 00<rept>                    file_name times 50 db 0 
    19 00000032 7200                        access_mode  db "r", 0
    20                                      
    21 00000034 FFFFFFFF                    file_descriptor dd -1
    22 00000038 FFFFFFFF                    length_text dd -1
    23 0000003C 256300                      character_format db "%c", 0
    24 0000003F 257300                      read_format db "%s", 0
    25 00000042 00000000                    word_number dd 0
    26 00000046 0400                        four dw 4
    27 00000048 00000000<rept>              input_text times 101 dd 0 
    28 000001DC 00000000<rept>              output_text times 101 dd 0
    29                                      
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; reading the name of the file
    35 00000000 68[00000000]                    push dword file_name
    36 00000005 68[3F000000]                    push dword read_format
    37 0000000A FF15[00000000]                  call [scanf]
    38 00000010 83C408                          add esp, 4*2
    39                                          
    40                                          ; opening the file
    41 00000013 68[32000000]                    push dword access_mode
    42 00000018 68[00000000]                    push dword file_name
    43 0000001D FF15[00000000]                  call [fopen]
    44 00000023 83C408                          add esp, 4*2
    45                                          
    46 00000026 A3[34000000]                    mov [file_descriptor], eax
    47                                          
    48                                          ; checking if the file was opened succesfully
    49 0000002B 83F800                          cmp eax, 0
    50 0000002E 0F8488000000                    jz final
    51                                          
    52                                          ;int fread(void * str, int size, int count, FILE * stream)
    53                                          
    54 00000034 FF35[34000000]                  push dword [file_descriptor]
    55 0000003A 6A64                            push dword 100
    56 0000003C 6A01                            push dword 1
    57 0000003E 68[48000000]                    push dword input_text
    58 00000043 FF15[00000000]                  call [fread]
    59 00000049 83C410                          add esp, 4*4
    60                                          
    61 0000004C 89C1                            mov ecx, eax ; saving the length of the text read
    62 0000004E BB00000000                      mov ebx, 0 ; my variable that counts the words
    63 00000053 E367                            jecxz final ; cheking if i read sth or not
    64                                          
    65 00000055 BF[DC010000]                    mov edi, output_text
    66 0000005A BE[48000000]                    mov esi, input_text
    67                                          
    68                                          repeat1:
    69 0000005F 89D8                                mov eax, ebx
    70 00000061 66F735[46000000]                    div word [four]
    71 00000068 6683FA00                            cmp dx, 0
    72 0000006C 750E                                jne NotAMultiplePos
    73                                              
    74                                              ; case in which the word is on a 4 multiple position
    75 0000006E AC                                  lodsb
    76                                              
    77 0000006F 3C20                                cmp al, " "
    78 00000071 7403                                je DoneSavingTheWord
    79                                              
    80 00000073 AA                                  stosb 
    81                                              
    82 00000074 EBE9                                jmp repeat1
    83                                              
    84                                              DoneSavingTheWord:
    85 00000076 B020                                mov al, " "
    86 00000078 AA                                  stosb ; adding a space between words
    87 00000079 83C301                              add ebx, 1
    88                                              
    89                                              
    90                                              NotAMultiplePos:
    91                                              
    92 0000007C AC                                  lodsb
    93                                              
    94                                              ; here i check if i am beginning to read a new word
    95 0000007D 3C20                                cmp al," "
    96 0000007F 7517                                jne GoNext
    97                                              
    98 00000081 803E41                              cmp byte [esi], "A"
    99 00000084 7C12                                jl GoNext
   100 00000086 803E5A                              cmp byte [esi], "Z"
   101 00000089 7C0A                                jl FoundNewWord
   102 0000008B 803E61                              cmp byte [esi], "a"
   103 0000008E 7C08                                jl GoNext
   104 00000090 803E7A                              cmp byte [esi], "z"
   105 00000093 7F03                                jg GoNext
   106                                              
   107                                              
   108                                              FoundNewWord:
   109 00000095 83C301                              add ebx, 1
   110                                              
   111                                              GoNext:
   112 00000098 83E901                              sub ecx, 1
   113 0000009B E302                                jecxz Done
   114                                          
   115 0000009D EBC0                            jmp repeat1
   116                                          
   117                                          Done:
   118                                          
   119                                          ; printing the answer
   120 0000009F 68[DC010000]                    push dword output_text
   121 000000A4 FF15[00000000]                  call [printf]
   122 000000AA 83C404                          add esp, 4*1
   123                                          
   124 000000AD FF35[34000000]                  push dword [file_descriptor]
   125 000000B3 FF15[00000000]                  call [fclose]
   126 000000B9 83C404                          add esp, 4*1
   127                                          
   128                                          
   129                                          
   130                                          final:
   131                                          
   132                                          
   133                                          
   134                                          
   135                                      
   136                                          ; exit(0)
   137 000000BC 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   138 000000BE FF15[00000000]                  call    [exit]       ; call exit to terminate the program
