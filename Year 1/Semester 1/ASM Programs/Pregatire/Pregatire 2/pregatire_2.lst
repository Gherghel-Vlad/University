     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, fprintf, fscanf            ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  
    15                                  
    16                                  
    17                                  segment data use32 class=data
    18 00000000 696E7075742E747874-         input_file_name db "input.txt", 0
    18 00000009 00                 
    19 0000000A FFFFFFFF                    input_file_name_descriptor dd -1
    20 0000000E 7200                        read_access db "r", 0
    21                                      
    22 00000010 6F75747075742E7478-         output_file_name db "output.txt", 0
    22 00000019 7400               
    23 0000001B FFFFFFFF                    output_file_name_descriptor dd -1
    24 0000001F 7700                        write_access db "w", 0
    25                                      
    26 00000021 256300                      read_format db "%c", 0
    27 00000024 0000                        character_read db 0, 0
    28 00000026 257300                      write_format db "%s", 0
    29 00000029 00000000                    sentence_number dd 0
    30                                      
    31                                  
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; opening the input file
    36 00000000 68[0E000000]                    push dword read_access
    37 00000005 68[00000000]                    push dword input_file_name
    38 0000000A FF15[00000000]                  call [fopen]
    39 00000010 83C408                          add esp, 4*2
    40                                          
    41 00000013 A3[0A000000]                    mov [input_file_name_descriptor], eax
    42                                          ; checking if it was opened correctly
    43 00000018 83F800                          cmp eax, 0
    44 0000001B 0F8499000000                    jz final
    45                                          
    46                                          ; opening the output file
    47 00000021 68[1F000000]                    push dword write_access
    48 00000026 68[10000000]                    push dword output_file_name
    49 0000002B FF15[00000000]                  call [fopen]
    50 00000031 83C408                          add esp, 4*2
    51                                          
    52 00000034 A3[1B000000]                    mov [output_file_name_descriptor], eax
    53                                          ; checking if it was opened correctly
    54 00000039 83F800                          cmp eax, 0
    55 0000003C 747C                            jz final
    56                                          
    57 0000003E BB00000000                      mov ebx, 0 ; ebx will be my sentence counter
    58                                          
    59                                          repeat1:
    60                                              
    61                                              ; reading a character from the input file
    62                                              ;int fscanf(FILE *stream, const char *format, ...)
    63 00000043 68[24000000]                        push dword character_read
    64 00000048 68[21000000]                        push dword read_format
    65 0000004D FF35[0A000000]                      push dword [input_file_name_descriptor]
    66 00000053 FF15[00000000]                      call [fscanf]
    67 00000059 83C40C                              add esp, 4*3
    68                                              
    69                                              ; checking if it s end of file
    70 0000005C 83F8FF                              cmp eax, -1
    71 0000005F 743B                                je done
    72                                              
    73                                              ; checking if a new sentence is coming
    74 00000061 803D[24000000]21                    cmp byte [character_read], '!'
    75 00000068 7505                                jne continue
    76                                              
    77 0000006A 83C301                              add ebx, 1
    78 0000006D EBD4                                jmp repeat1
    79                                              
    80                                              continue:
    81                                              ; checking if the character is inside the sentence that i need to print
    82 0000006F 6689D8                              mov ax, bx
    83 00000072 6699                                cwd
    84 00000074 66B90200                            mov cx, 2
    85 00000078 66F7F1                              div cx
    86                                              
    87 0000007B 6683FA01                            cmp dx, 1
    88 0000007F 7519                                jne NoNeedToPrint
    89                                              
    90                                              ; printing the character in the file
    91                                              ;int fprintf(FILE *stream, const char *format, ...)
    92 00000081 68[24000000]                        push dword character_read
    93 00000086 68[26000000]                        push dword write_format
    94 0000008B FF35[1B000000]                      push dword [output_file_name_descriptor]
    95 00000091 FF15[00000000]                      call [fprintf]
    96 00000097 83C40C                              add esp, 4*3
    97                                              
    98                                          
    99                                              
   100                                              NoNeedToPrint:
   101                                          
   102 0000009A EBA7                            jmp repeat1
   103                                          
   104                                          done:
   105                                          ; closing the files
   106 0000009C FF35[0A000000]                  push dword [input_file_name_descriptor]
   107 000000A2 FF15[00000000]                  call [fclose]
   108 000000A8 83C404                          add esp, 4
   109                                          
   110 000000AB FF35[1B000000]                  push dword [output_file_name_descriptor]
   111 000000B1 FF15[00000000]                  call [fclose]
   112 000000B7 83C404                          add esp, 4
   113                                          
   114                                          
   115                                          final:
   116                                      
   117                                          ; exit(0)
   118 000000BA 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 000000BC FF15[00000000]                  call    [exit]       ; call exit to terminate the program
