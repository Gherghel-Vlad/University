     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 AACD                        a dw 1100110110101010b
    15 00000002 DBEC                        b dw 1110110011011011b
    16 00000004 <res 00000004>              c RESD 1 ;  c should be the inverse of 100 011011 0110101 1100110110101010 = 11001101101010100110101011011100
    17                                                                                                                  ;11001101101010100110101011011100
    18                                      
    19                                      
    20                                      
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; Given the words A and B, compute the doubleword C as follows:
    26                                          ;    the bits 0-2 of C are the same as the bits 12-14 of A
    27                                          ;    the bits 3-8 of C are the same as the bits 0-5 of B
    28                                          ;    the bits 9-15 of C are the same as the bits 3-9 of A
    29                                          ;    the bits 16-31 of C are the same as the bits of A
    30                                          
    31 00000000 BB00000000                      mov ebx, 0 ; in EBX will be my result
    32                                          
    33                                          ;    the bits 0-2 of C are the same as the bits 12-14 of A
    34 00000005 B800000000                      mov eax, 0
    35 0000000A 66A1[00000000]                  mov ax, [a]
    36 00000010 66250070                        and ax, 0111000000000000b ;  isolated the 12-14 bits of A
    37 00000014 B10C                            mov cl, 12
    38 00000016 66D3C8                          ror ax, cl ; we rotate 12 positions to the right
    39 00000019 09C3                            or ebx, eax ;  we put the bits in the result
    40                                          
    41                                          ;    the bits 3-8 of C are the same as the bits 0-5 of B
    42 0000001B B800000000                      mov eax, 0
    43 00000020 66A1[02000000]                  mov ax, [b]
    44 00000026 6683E03F                        and ax, 0000000000111111b ;  we isolate bits 0-5 of B
    45 0000002A B103                            mov cl, 3
    46 0000002C 66C1C003                        rol ax, 3 ;  we rotate 3 positions to the left
    47 00000030 09C3                            or ebx, eax ; we put the bits in the result
    48                                          
    49                                          
    50                                          ;    the bits 9-15 of C are the same as the bits 3-9 of A
    51 00000032 B800000000                      mov eax, 0
    52 00000037 66A1[00000000]                  mov ax, [a]
    53 0000003D 6625F803                        and ax, 0000001111111000b ;  isolated the 3-9 bits of A
    54 00000041 B106                            mov cl, 6
    55 00000043 66D3C0                          rol ax, cl ; we rotate 6 positions to the left
    56 00000046 09C3                            or ebx, eax ;  we put the bits in the result
    57                                          
    58                                          ;    the bits 16-31 of C are the same as the bits of A
    59 00000048 B110                            mov cl, 16
    60 0000004A D3C3                            rol ebx, cl ; we rotate so that we have the high part ( 16-31 bits) in the BX
    61 0000004C 66A1[00000000]                  mov ax, [a]
    62 00000052 6609C3                          or bx, ax
    63 00000055 C1C310                          rol ebx, 16
    64                                          
    65 00000058 891D[04000000]                  mov [c], ebx
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                      
    78                                          ; exit(0)
    79 0000005E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 00000060 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
