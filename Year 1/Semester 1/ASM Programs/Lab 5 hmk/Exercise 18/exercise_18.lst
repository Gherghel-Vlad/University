     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 020103FD                    a db 2, 1, 3, -3
    14                                      l_a EQU $-a
    15 00000004 0405FB07                    b db 4, 5, -5, 7 ; , 9, 13, 15, 16, 20, 21
    16                                      l_b EQU $-b
    17 00000008 FF<rept>                    r times (l_a+l_b) db -1
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; Two byte strings A and B are given. Obtain the string R that 
    23                                          ; contains only the odd positive elements of the two strings
    24                                          ; A: 2, 1, 3, -3
    25                                          ; B: 4, 5, -5, 7
    26                                          ; R: 1, 3, 5, 7
    27                                          
    28                                          
    29 00000000 B904000000                      mov ecx, l_a ; ECX = size of a
    30 00000005 BE00000000                      mov esi, 0 ; index for a
    31 0000000A BA00000000                      mov edx, 0 ; index for result location
    32 0000000F E32E                            jecxz EndLoop1
    33                                          Repeat1:
    34 00000011 B000                                mov al, 0
    35 00000013 3886[00000000]                      cmp [a+esi], al
    36 00000019 7821                                js IsNegative1 ; jumps if it s a negative number
    37 0000001B 66B80000                            mov ax, 0
    38 0000001F 8A86[00000000]                      mov al, [a+esi]
    39 00000025 B302                                mov bl, 2
    40 00000027 F6F3                                div bl ; AH = AX % BL, AL = AH/AL
    41 00000029 B001                                mov al, 1
    42 0000002B 38C4                                cmp ah, al
    43 0000002D 750D                                jnz IsNotOdd1
    44 0000002F 8A9E[00000000]                      mov bl, [a+esi]
    45 00000035 889A[08000000]                      mov [r+edx], bl ; saving the result if it s a positive odd number
    46 0000003B 42                                  inc edx
    47                                              IsNotOdd1:
    48                                              IsNegative1:
    49 0000003C 46                                  inc esi
    50 0000003D E2D2                            loop Repeat1
    51                                          EndLoop1:
    52                                          
    53 0000003F B904000000                      mov ecx, l_b ; ECX = size of b
    54 00000044 BE00000000                      mov esi, 0 ; index for a
    55 00000049 E32E                            jecxz EndLoop2
    56                                          Repeat2:
    57 0000004B B000                                mov al, 0
    58 0000004D 3886[04000000]                      cmp [b+esi], al
    59 00000053 7821                                js IsNegative2 ; jumps if it s a negative number
    60 00000055 66B80000                            mov ax, 0
    61 00000059 8A86[04000000]                      mov al, [b+esi]
    62 0000005F B302                                mov bl, 2
    63 00000061 F6F3                                div bl ; AH = AX % BL, AL = AH/AL
    64 00000063 B001                                mov al, 1
    65 00000065 38C4                                cmp ah, al
    66 00000067 750D                                jnz IsNotOdd2
    67 00000069 8A9E[04000000]                      mov bl, [b+esi]
    68 0000006F 889A[08000000]                      mov [r+edx], bl ; saving the result if it s a positive odd number
    69 00000075 42                                  inc edx
    70                                              IsNotOdd2:
    71                                              IsNegative2:
    72 00000076 46                                  inc esi
    73 00000077 E2D2                            loop Repeat2
    74                                          EndLoop2:
    75                                          
    76                                          
    77                                          
    78                                          
    79                                          
    80                                          
    81                                          
    82                                          
    83                                          
    84                                          
    85                                          
    86                                          
    87                                          
    88                                          
    89                                          
    90                                          
    91                                          ; exit(0)
    92 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    93 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
