     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 2003                        a dw 800
    14 00000002 D4FE                        b dw -300
    15 00000004 C800                        c dw 200
    16 00000006 6400                        d dw 100
    17 00000008 0000                        x dw 0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (a-b-c)+(a-c-d-d) = (800 - 300 - 200) + (800 - 200 - 100 - 100) = 300 + 400 = 700
    23 00000000 66A1[00000000]                  mov AX, [a]; ax = a 
    24 00000006 662B05[02000000]                sub AX, [b]; ax -= b
    25 0000000D 662B05[04000000]                sub AX, [c]; ax -= c
    26                                          
    27 00000014 668B1D[00000000]                mov BX, [a]; bx = a 
    28 0000001B 662B1D[04000000]                sub BX, [c]; bx -=c
    29 00000022 662B1D[06000000]                sub BX, [d]; bx -= d
    30 00000029 662B1D[06000000]                sub BX, [d]; bx -= d
    31                                          
    32 00000030 6601D8                          add AX, BX; AX += BX
    33 00000033 66A3[08000000]                  mov [x], ax
    34                                          
    35                                          
    36                                          
    37                                          
    38                                          ; exit(0)
    39 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
