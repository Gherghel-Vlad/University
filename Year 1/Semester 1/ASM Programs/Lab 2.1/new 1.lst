     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte, b - word
     3                                  ; (b / a * 2 + 10) * b - b * 15;
     4                                  ; ex. 1: a = 10; b = 40; Result: (40 / 10 * 2 + 10) * 40 - 40 * 15 = 18 * 40 - 1600 = 720 - 600 = 120
     5                                  ; ex. 2: a = 100; b = 50; Result: (50 / 100 * 2 + 10) * 50 - 50 * 15 = 12 * 50 - 750 = 600 - 750 = - 150
     6                                  bits 32 ;assembling for the 32 bits architecture
     7                                  ; the start label will be the entry point in the program
     8                                  global  start 
     9                                  
    10                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    11                                  
    12                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    13                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    14                                  segment  data use32 class=data ; the data segment where the variables are declared 
    15 00000000 0A                      	a db 10 ; a->Al, AH-= 8biti,1byte; BL, BH. CL.CH. DH,DL
    16                                  
    17 00000001 2800                        b dw 40 ;AX = AH |AL -2bytes BX, CX, EAX (high part)
    18                                  
    19 00000003 12                          c db 12h;
    20                                  
    21 00000004 13B1                        d dw 0B113h;
    22                                  
    23 00000006 2AC3                        e dw 0C32Ah;
    24                                      
    25                                      
    26                                      
    27                                      
    28                                      
    29                                  segment  code use32 class=code ; code segment
    30                                  start: 
    31 00000000 66B80900                    mov ax, 9; 9:5 -> 1 rest 4
    32 00000004 B305                        mov bl ,5;
    33 00000006 BA06000000                  mov edx, 6;
    34                                  
    35 0000000B F6F3                        div bl;
    36                                  
    37                                  
    38                                      
    39                                      
    40 0000000D A0[00000000]                       mov al,[a]; [a] - it s value
    41 00000012 66BB[0000]                         mov bx, a; a -  it s adress 
    42 00000016 668B1D[01000000]                   mov bx, [b];
    43 0000001D 66A1[00000000]                     mov ax, [a];
    44 00000023 A1[00000000]                        mov eax, [a]; -> 0A 28 00 12 -> 4 -> little indian: eax: 12 00 28  0A
    45 00000028 8B1D[01000000]                      mov ebx, [b]; -> 28 00 12 13 B1 (28 00 12 13) -> LI: 13 12 00 28
    46                                              
    47                                  
    48                                  
    49                                  
    50                                  
    51 0000002E 66A1[01000000]          	mov  AX, [b] ;AX = b
    52 00000034 F635[00000000]          	div  BYTE [a] ;AL = AX / a = b / a and AH = AX % a = b % a
    53                                  	
    54 0000003A B402                    	mov  AH, 2 ;AH = 2
    55 0000003C F6E4                    	mul  AH ;AX = AL * AH = b / a * 2	
    56                                  	
    57 0000003E 6683C00A                	add  AX, 10 ;AX = AX + b = b / a * 2 + 10
    58                                  	
    59 00000042 66F725[01000000]        	mul  word [b] ;DX:AX = AX * b = (b / a * 2 + 10) * b
    60                                  	
    61 00000049 6652                    	push  DX ;the high part of the doubleword DX:AX is saved on the stack
    62 0000004B 6650                    	push  AX ;the low part of the doubleword DX:AX is saved on the stack
    63 0000004D 5B                      	pop  EBX ;EBX = DX:AX = (b / a * 2 + 10) * b
    64                                  	
    65 0000004E 66A1[01000000]          	mov  AX, [b] ;AX = b
    66 00000054 66BA0F00                	mov  DX, 15 ;DX = 15
    67 00000058 66F7E2                  	mul  DX ;DX:AX = b * 15
    68                                  	
    69 0000005B 6652                    	push  DX ;the high part of the doubleword DX:AX is saved on the stack
    70 0000005D 6650                    	push  AX ;the low part of the doubleword DX:AX is saved on the stack
    71 0000005F 58                      	pop  EAX ;EAX = DX:AX = b * 15
    72                                  	
    73 00000060 29C3                    	sub  EBX, EAX ;EBX = EBX - EAX = (b / a * 2 + 10) * b - b * 15
    74                                  	
    75 00000062 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    76 00000064 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of the program
