     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b-byte; c-word; e-doubleword; x-qword
    14 00000000 96                          a db 150
    15 00000001 C8                          b db 200
    16 00000002 D007                        c dw 2000
    17 00000004 A0860100                    e dd 100000
    18 00000008 80841E0000000000            x dq 2000000
    19 00000010 <res 00000008>              result RESQ 1
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; (a+b*c+2/c)/(2+a)+e+x = (150 + 200*2000 +2/2000)/(2+150) + 100.000 + 2.000.000 = (150 + 400,000)/152 + 100.000 =
    26                                          ; = 400.150 / 152 + 100.000 + 2.000.000 = 2632 r 86 + 100.000 + 2.000.000= 102.632 r 86 + 2.000.000 = 2.102.632 r 82 
    27                                          
    28 00000000 A0[01000000]                    mov al, [b]
    29 00000005 B400                            mov ah, 0
    30                                          ; unsigned conversion b (byte) in AX (word)
    31                                          
    32 00000007 66F725[02000000]                mul word [c]
    33                                          ; DX:AX = b*c
    34                                          
    35 0000000E 6652                            push dx
    36 00000010 6650                            push ax
    37 00000012 5B                              pop ebx
    38                                          ; EBX = b*c
    39                                          
    40 00000013 66B80200                        mov ax, 2
    41 00000017 66BA0000                        mov dx, 0
    42 0000001B 66F735[02000000]                div word [c]
    43                                          ; AX = 2/c DX = 2%c
    44                                          
    45                                          ; I wont care about the remainder from now on
    46                                          
    47 00000022 B900000000                      mov ecx, 0
    48 00000027 6689C1                          mov cx, ax
    49                                          ; ECX = 2/c
    50                                          
    51 0000002A B800000000                      mov eax, 0
    52 0000002F A0[00000000]                    mov al, [a]
    53                                          ; unsigned conversion from a (byte) in EAX (dword)
    54                                          
    55 00000034 01C3                            add ebx, eax
    56 00000036 01CB                            add ebx, ecx
    57                                          ; EBX = a+b*c+2/c
    58                                          
    59 00000038 66B80000                        mov ax, 0
    60 0000003C A0[00000000]                    mov al, [a]
    61 00000041 0402                            add al, 2
    62                                          ; AX = 2+a
    63                                          
    64 00000043 6650                            push ax
    65 00000045 6659                            pop cx
    66 00000047 53                              push ebx
    67 00000048 6658                            pop ax
    68 0000004A 665A                            pop dx
    69                                          ; EAX = a+b*c+2/c
    70                                          ; CX = 2+a
    71                                          
    72                                          
    73 0000004C 66F7F1                          div cx
    74                                          ; AX = (a+b*c+2/c) / (2+a) DX = (a+b*c+2/c) % (2+a)
    75                                          
    76 0000004F BB00000000                      mov ebx, 0
    77 00000054 6689C3                          mov bx, ax
    78                                          ; EBX = (a+b*c+2/c) / (2+a)
    79                                          
    80 00000057 A1[04000000]                    mov eax, [e]
    81                                          ; EAX = e
    82                                          
    83 0000005C 01D8                            add eax, ebx
    84                                          ; EAX = (a+b*c+2/c) / (2+a) + e
    85                                          
    86 0000005E BA00000000                      mov edx, 0
    87                                          ; unsigned conversion EDX:EAX = (a+b*c+2/c) / (2+a) + e
    88                                          
    89 00000063 0305[08000000]                  add eax, dword [x+0]
    90 00000069 1315[0C000000]                  adc edx, dword [x+4]
    91                                          
    92 0000006F A3[10000000]                    mov [result], eax
    93 00000074 8915[14000000]                  mov [result+4], edx
    94                                          
    95                                          
    96                                          
    97                                          
    98                                          
    99                                          
   100                                          
   101                                          
   102                                          
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
   109                                          
   110                                          
   111                                          
   112                                          
   113                                          
   114                                          
   115                                          
   116                                          
   117                                          
   118                                          ; exit(0)
   119 0000007A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   120 0000007C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
