     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Signed representation
    14 00000000 64                          a db 100
    15 00000001 F401                        b dw 500
    16 00000003 70110100                    c dd 70000
    17 00000007 A086010000000000            d dq 100000
    18 0000000F <res 00000008>              result RESQ 1
    19                                      
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; (b+b+d)-(c+a) = (500 + 500 + 100000) - (70000 + 100) = 101000 - 70100 = 30900
    25                                          
    26 00000000 66A1[01000000]                  mov ax, [b]
    27 00000006 660305[01000000]                add ax, [b]
    28                                          ; AX = b+b
    29                                          
    30 0000000D 98                              CWDE
    31 0000000E 99                              CDQ
    32                                          ; signed transformation of b+b (byte) in qword EDX:EAX = b+b
    33 0000000F 0305[07000000]                  add eax, dword [d+0]
    34 00000015 1315[0B000000]                  adc edx, dword [d+4]
    35                                          ; EDX:EAX = b+b+d
    36                                          
    37 0000001B 89C3                            mov ebx, eax
    38 0000001D 89D1                            mov ecx, edx
    39                                          ; ECX:EBX = EDX:EAX = b+b+d
    40                                          
    41 0000001F A0[00000000]                    mov al, [a]
    42 00000024 6698                            CBW
    43 00000026 98                              CWDE
    44                                          ; signed transformation of a (byte) into dword
    45                                          
    46 00000027 0305[03000000]                  add eax, [c]
    47                                          ; EAX = a+c
    48 0000002D 99                              CDQ
    49                                          ; EDX:EAX = a+c (sign conversion dword -> qword)
    50                                          
    51 0000002E 29C3                            sub ebx, eax
    52 00000030 19D1                            sbb ecx, edx
    53                                          ; ECX:EBX = (b+b+d)-(c+a)
    54                                          
    55 00000032 891D[0F000000]                  mov dword [result+0], ebx
    56 00000038 890D[13000000]                  mov dword [result+4], ecx
    57                                          
    58                                          
    59                                          
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          
    65                                      
    66                                          ; exit(0)
    67 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
