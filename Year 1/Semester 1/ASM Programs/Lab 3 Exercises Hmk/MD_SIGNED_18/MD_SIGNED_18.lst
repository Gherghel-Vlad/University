     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b-byte; c-word; e-doubleword; x-qword
    14 00000000 CE                          a db -50
    15 00000001 9C                          b db -100
    16 00000002 D007                        c dw 2000
    17 00000004 A0860100                    e dd 100000
    18 00000008 80841E0000000000            x dq 2000000
    19 00000010 <res 00000008>              result RESQ 1
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; (a+b*c+2/c)/(2+a)+e+x = (-50 -100 * 2000 + 2/2000)/(2 - 50) + 100.000 + 2.000.000 =
    26                                          ; = (-50-200,000) / (-48) + 100.000 + 2.000.000 = 4167 R 34 + 2.100.000 = 2.104.167 r 34 
    27                                          
    28                                          
    29 00000000 A0[01000000]                    mov al, [b]
    30 00000005 6698                            cbw
    31                                          ; unsigned conversion b (byte) in AX (word)
    32                                          
    33 00000007 66F72D[02000000]                imul word [c]
    34                                          ; DX:AX = b*c
    35                                          
    36 0000000E 6652                            push dx
    37 00000010 6650                            push ax
    38 00000012 5B                              pop ebx
    39                                          ; EBX = b*c
    40                                          
    41 00000013 66B80200                        mov ax, 2
    42 00000017 66BA0000                        mov dx, 0
    43 0000001B 66F73D[02000000]                idiv word [c]
    44                                          ; AX = 2/c DX = 2%c
    45                                          
    46                                          ; I wont care about the remainder from now on
    47                                          
    48 00000022 B900000000                      mov ecx, 0
    49 00000027 6689C1                          mov cx, ax
    50                                          ; ECX = 2/c
    51                                          
    52 0000002A A0[00000000]                    mov al, [a]
    53 0000002F 6698                            cbw
    54 00000031 98                              cwde
    55                                          ; signed conversion from a (byte) in EAX (dword)
    56                                          
    57 00000032 01C3                            add ebx, eax
    58 00000034 01CB                            add ebx, ecx
    59                                          ; EBX = a+b*c+2/c
    60                                          
    61 00000036 A0[00000000]                    mov al, [a]
    62 0000003B 0402                            add al, 2
    63                                          ; AX = 2+a
    64                                          
    65 0000003D 6698                            cbw
    66                                          ; singed conversion of a (byte) to AX (word)
    67                                          
    68 0000003F 6650                            push ax
    69 00000041 6659                            pop cx
    70 00000043 53                              push ebx
    71 00000044 6658                            pop ax
    72 00000046 665A                            pop dx
    73                                          ; EAX = a+b*c+2/c
    74                                          ; CX = 2+a
    75                                          
    76                                          
    77 00000048 66F7F9                          idiv cx
    78                                          ; AX = (a+b*c+2/c) / (2+a) DX = (a+b*c+2/c) % (2+a)
    79                                          
    80 0000004B BB00000000                      mov ebx, 0
    81 00000050 6689C3                          mov bx, ax
    82                                          ; EBX = (a+b*c+2/c) / (2+a)
    83                                          
    84 00000053 A1[04000000]                    mov eax, [e]
    85                                          ; EAX = e
    86                                          
    87 00000058 01D8                            add eax, ebx
    88                                          ; EAX = (a+b*c+2/c) / (2+a) + e
    89                                          
    90 0000005A 99                              cdq
    91                                          ; signed conversion EDX:EAX = (a+b*c+2/c) / (2+a) + e
    92                                          
    93 0000005B 0305[08000000]                  add eax, dword [x+0]
    94 00000061 1315[0C000000]                  adc edx, dword [x+4]
    95                                          
    96 00000067 A3[10000000]                    mov [result], eax
    97 0000006C 8915[14000000]                  mov [result+4], edx
    98                                          
    99                                          
   100                                          
   101                                          
   102                                          
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
   109                                          
   110                                          
   111                                          
   112                                          
   113                                          
   114                                          
   115                                          
   116                                          
   117                                          
   118                                          
   119                                          
   120                                          
   121                                          
   122                                          ; exit(0)
   123 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   124 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
