     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    15 00000000 82                          a db 130
    16 00000001 9001                        b dw 400
    17 00000003 70110100                    c dd 70000
    18 00000007 A086010000000000            d dq 100000
    19 0000000F <res 00000008>              result resq 1
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; (c+d)-(a+d)+b = (70000 + 100000) - (130 + 100000) + 400 = 170000 - 100130 = 69870 +400 = 70270
    25 00000000 A1[03000000]                    mov eax, [c] ; eax = c
    26 00000005 BB00000000                      mov ebx, 0 ; unsigned convert c from dword to qword
    27                                          
    28 0000000A 0305[07000000]                  add eax, [d+0] 
    29 00000010 131D[0B000000]                  adc ebx, [d+4]
    30                                          ; EBX:EAX = c+d
    31                                          
    32 00000016 53                              push ebx
    33 00000017 50                              push eax
    34                                          ; saved c+d
    35                                          
    36 00000018 B800000000                      mov eax, 0
    37 0000001D A0[00000000]                    mov al, [a]
    38 00000022 BB00000000                      mov ebx, 0
    39                                          ; unsigned conversion a from byte to qword EBX:EAX = a
    40                                          
    41 00000027 0305[07000000]                  add eax, [d+0]
    42 0000002D 131D[0B000000]                  adc ebx, [d+4]
    43                                          ; ebx:eax = a+d
    44                                          
    45 00000033 59                              pop ecx
    46 00000034 5A                              pop edx
    47                                          ; edx:ecx = c+d
    48                                          
    49 00000035 29C1                            sub ecx, eax
    50 00000037 19DA                            sbb edx, ebx
    51                                          ; edx:ecx = (c+d) - (a+d)
    52                                          
    53 00000039 B800000000                      mov eax, 0
    54 0000003E 66A1[01000000]                  mov ax, [b]
    55 00000044 BB00000000                      mov ebx, 0
    56                                          ; unsigned conversion of b from dword to qword EBX:EAX = b
    57                                          
    58 00000049 01C1                            add ecx, eax
    59 0000004B 11DA                            adc edx, ebx
    60                                          ; EDX:ECX = (c+d)-(a+d)+b
    61                                          
    62 0000004D 890D[0F000000]                  mov dword [result], ecx
    63 00000053 8915[13000000]                  mov dword [result+4], edx
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          ; exit(0)
    71 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
