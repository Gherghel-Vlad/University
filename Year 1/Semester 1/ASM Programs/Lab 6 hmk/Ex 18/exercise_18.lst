     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 7856AB12CDAB561244-         sir DD 12AB5678h, 1256ABCDh, 12344344h
    13 00000009 433412             
    14                                      len EQU ($-sir)/4 ; i want the number of words
    15 0000000C 04000000                    four dd 4
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; I am doing this on Johnny Cash songs :)
    21                                          ; A string of doublewords is given. Order in increasing order the string of the high words (most significant) from these doublewords. The low words (least significant) remain unchanged.
    22                                          
    23 00000000 BB00000000                      mov ebx, 0 ; this will show on which position i am on in the array (to which i compare to the whole string)
    24 00000005 BA01000000                      mov edx, 1 ; this will show me to whom i will compare that one element on the position
    25                                          
    26                                          ; Johnny Cash - Hurt really good song
    27                                          
    28                                          NotYetFinished:
    29                                          
    30 0000000A 89D8                            mov eax, ebx
    31 0000000C F725[0C000000]                  mul DWORD [four]
    32 00000012 05[00000000]                    add eax, sir
    33 00000017 89C6                            mov esi, eax ; ESI will show to whom i will compare everything
    34                                          
    35 00000019 AD                              LODSD ; EAX = the value to whom i will compare everything 
    36                                          
    37 0000001A 89DA                            mov edx, ebx
    38 0000001C 42                              inc edx ; starting from the next element after the position EBX will show me
    39                                          
    40 0000001D 89C1                            mov ecx, eax ; ECX = EAX
    41                                          
    42                                          
    43                                          ContinueComparingBoye:
    44 0000001F C1C910                          ror ecx, 16
    45                                          
    46 00000022 52                              push edx ; saving the index so that it s not erased in the multiplication
    47                                          
    48 00000023 89D0                            mov eax, edx
    49 00000025 F725[0C000000]                  mul DWORD [four]
    50 0000002B 05[00000000]                    add eax, sir
    51 00000030 89C6                            mov esi, eax ; ESi will show to whom i compare to the element from ECX
    52                                          
    53 00000032 5A                              pop edx ; getting the index back 
    54                                          
    55 00000033 AD                              LODSD ; EAX got the  the one to i compare with the element on the fixed position
    56                                          
    57 00000034 C1C810                          ror eax, 16
    58                                          ; i only care about the high part from both of them ... 
    59                                          ; Johnny Cash The Man Comes Around really good song as well
    60                                          
    61 00000037 6639C8                          cmp ax, cx
    62 0000003A 7F38                            jg DontInterchange
    63                                              
    64 0000003C 6650                                push WORD ax
    65 0000003E 6651                                push WORD cx
    66                                              
    67 00000040 6658                                pop WORD ax
    68 00000042 6659                                pop WORD cx ; interchanged AX and CX without changing the high parts...i hope
    69                                              
    70 00000044 C1C810                              ror eax, 16
    71 00000047 C1C910                              ror ecx, 16
    72                                              
    73 0000004A 52                                  push edx
    74 0000004B 50                                  push eax
    75                                              
    76 0000004C 89D0                                mov eax, edx
    77 0000004E F725[0C000000]                      mul DWORD [four]
    78 00000054 05[00000000]                        add eax, sir
    79 00000059 89C7                                mov edi, eax ; EDI will show me where to save the one that s less
    80                                              
    81 0000005B 58                                  pop eax
    82 0000005C 5A                                  pop edx
    83                                              
    84 0000005D AB                                  STOSD 
    85                                              
    86 0000005E 52                                  push edx
    87 0000005F 50                                  push eax
    88                                              
    89 00000060 89D8                                mov eax, ebx
    90 00000062 F725[0C000000]                      mul DWORD [four]
    91 00000068 05[00000000]                        add eax, sir
    92 0000006D 89C7                                mov edi, eax ; EDI will show me where to save the one that s greater
    93                                              
    94 0000006F 58                                  pop eax
    95 00000070 5A                                  pop edx
    96                                              
    97 00000071 89C8                                mov eax, ecx
    98 00000073 AB                                  STOSD 
    99                                          
   100                                          
   101                                          DontInterchange:
   102                                          
   103                                          
   104 00000074 42                              inc edx
   105                                          
   106 00000075 83FA03                          cmp edx, len
   107 00000078 7CA5                            jl ContinueComparingBoye
   108                                          
   109 0000007A 43                              inc ebx
   110 0000007B B903000000                      mov ecx, len
   111 00000080 49                              dec ecx ; this will show me the actual number on which EBX must arrive
   112 00000081 39CB                            cmp ebx, ecx
   113 00000083 7C85                            jl NotYetFinished
   114                                          
   115                                          
   116                                          
   117                                          
   118                                          
   119                                          
   120                                          
   121                                          
   122                                          
   123                                          
   124                                          
   125                                      
   126                                      
   127                                          ; exit(0)
   128 00000085 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   129 00000087 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
