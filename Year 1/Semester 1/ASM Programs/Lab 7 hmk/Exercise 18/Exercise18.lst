     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00000000                    a dd 0
    14 00000004 00000000                    b dd 0
    15 00000008 <res 00000004>              r resd 1
    16 0000000C <res 00000004>              nr_1 resd 1
    17 00000010 256400                      format_d db "%d", 0
    18 00000013 257800                      format_x db "%x", 0
    19 00000016 61203D2000                  message_a db "a = ", 0
    20 0000001B 62203D2000                  message_b db "b = ", 0
    21 00000020 5468652076616C7565-         message_nr_1 db "The value %d will have this number of 1's in the binary representation: %d", 0
    21 00000029 2025642077696C6C20-
    21 00000032 686176652074686973-
    21 0000003B 206E756D626572206F-
    21 00000044 662031277320696E20-
    21 0000004D 7468652062696E6172-
    21 00000056 792072657072657365-
    21 0000005F 6E746174696F6E3A20-
    21 00000068 256400             
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;Read a decimal number and a hexadecimal number from the keyboard. Display the number of 1's of the sum of the two numbers in decimal format.     Example:
    27                                          ; a = 32 = 0010 0000b
    28                                          ; b = 1Ah = 0001 1010b
    29                                          ; 32 + 1Ah = 0011 1010b
    30                                          ; The value printed on the screen will be 4
    31                                          
    32                                          ; imma print messages too
    33 00000000 68[16000000]                    push dword message_a
    34 00000005 FF15[00000000]                  call [printf]
    35 0000000B 83C404                          add esp, 4
    36                                          ;printing a =
    37                                          
    38                                          ;int scanf(const char * format, variable_address_1, ...);
    39                                          ; scanf(format_d, a)
    40 0000000E 68[00000000]                    push dword a
    41 00000013 68[10000000]                    push dword format_d
    42 00000018 FF15[00000000]                  call [scanf]
    43 0000001E 83C408                          add esp, 4 * 2
    44                                          ; Read the value a from the keyboard
    45                                          
    46 00000021 68[1B000000]                    push dword message_b
    47 00000026 FF15[00000000]                  call [printf]
    48 0000002C 83C404                          add esp, 4
    49                                          ;printing b =
    50                                          
    51                                          ; scanf(format_x, b)
    52 0000002F 68[04000000]                    push dword b
    53 00000034 68[13000000]                    push dword format_x
    54 00000039 FF15[00000000]                  call [scanf]
    55 0000003F 83C408                          add esp, 4 * 2
    56                                          ; Read the value b from the keyboard
    57                                          
    58 00000042 A1[00000000]                    mov eax, [a]
    59 00000047 0305[04000000]                  add eax, [b] ; EAX = a + b
    60                                          
    61 0000004D 89C3                            mov ebx, eax ; i save it so i can print it later
    62                                          
    63                                          ; I will use shifting with carry to calculate the number of 1's from the result
    64                                          
    65 0000004F B920000000                      mov ecx, 32 ;  will loop 32 time cuz of 32 bits
    66 00000054 BA00000000                      mov edx, 0 ; here i will calculate the number of 1's
    67 00000059 F8                              clc ; clearing the carry flag
    68                                          Repeta:
    69 0000005A D1E8                                shr eax, 1
    70                                              
    71 0000005C 7303                                jae Not1 ; will jump if CF is 0
    72 0000005E 83C201                              add edx, 1
    73                                              
    74                                              Not1:
    75 00000061 E2F7                            loop Repeta
    76                                          
    77                                          ; int printf(const char * format, variable_1, constant_2, ...);
    78                                          ; printf(message_nr_1, ebx, edx)
    79 00000063 52                              push edx
    80 00000064 53                              push ebx
    81 00000065 68[20000000]                    push dword message_nr_1
    82 0000006A FF15[00000000]                  call [printf]
    83 00000070 83C408                          add esp, 4 * 2
    84                                          
    85                                          
    86                                          
    87                                      
    88                                          ; exit(0)
    89 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    90 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
